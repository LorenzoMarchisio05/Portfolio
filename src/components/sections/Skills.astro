---
import { motion } from "motion/react";

const svgs = Array.from({ length: 30 }).map((_, i) => i + 1);
let index = 0;

const dotsBaseSize = 60;
const totalDots = svgs.length;

// Base configuration
const baseRadius = dotsBaseSize * 2;
const radiusIncrement = dotsBaseSize * 2;

// Calculate optimal number of circles based on dot spacing
function calculateOptimalCircleCount() {
  let circleCount = 1;
  let dotsPlaced = 0;

  while (dotsPlaced < totalDots) {
    const radius = baseRadius + (circleCount - 1) * radiusIncrement;
    const circumference = 2 * Math.PI * radius;

    // Calculate dots and ensure it's odd by rounding down to nearest odd number
    let dotsOnCircle = Math.floor(circumference / dotsBaseSize);
    dotsOnCircle = dotsOnCircle % 2 === 0 ? dotsOnCircle - 1 : dotsOnCircle;

    dotsPlaced += dotsOnCircle;

    if (dotsPlaced >= totalDots || circleCount >= 10) {
      break;
    }

    circleCount++;
  }

  return circleCount;
}

// Get the optimal number of circles
const circleCount = calculateOptimalCircleCount();

// Calculate circumferences for each circle
const circumferences = Array.from({ length: circleCount }).map((_, i) => {
  const radius = baseRadius + i * radiusIncrement;
  return 2 * Math.PI * radius;
});

// Calculate total circumference
const totalCircumference = circumferences.reduce((sum, c) => sum + c, 0);

// Distribute dots proportionally to circumference
const dotsPerCircle = circumferences.map((circumference) => {
  return Math.round((circumference / totalCircumference) * totalDots);
});

// Ensure we have exactly the total number of dots
dotsPerCircle[circleCount - 1] +=
  totalDots - dotsPerCircle.reduce((sum, count) => sum + count, 0);
---

<section
  id="skills"
  class="min-h-screen w-screen overflow-hidden flex flex-row px-20"
>
  <div class="space-y-8 py-24 px-2">
    <h2
      class="text-7xl font-bold tracking-tighter bg-gradient-to-r from-gray-900 via-gray-700 to-gray-900 bg-clip-text text-transparent"
    >
      Technical Skills
    </h2>
    <h3
      class="text-3xl font-semibold bg-gradient-to-l from-5% from-gray-900 to-red-700 bg-clip-text text-transparent"
    >
      Expertise & Technologies
    </h3>
    <div class="space-y-8">
      <p class="text-xl text-gray-700 max-w-2xl leading-relaxed">
        Proficient in a wide range of modern technologies and frameworks, with a
        focus on delivering scalable and efficient solutions.
      </p>
      <p class="text-lg text-gray-700 max-w-2xl leading-relaxed">
        Continuously expanding knowledge across the full stack development
        spectrum, from frontend design to backend architecture.
      </p>
    </div>
    <div class="flex space-x-6 mt-16">
      <button
        class="px-8 py-3 bg-gradient-to-r from-red-900 to-red-700 text-white rounded-lg shadow-lg font-medium tracking-wide"
      >
        Take a look at my CV
      </button>
      <a
        href="#contact"
        class="px-8 py-3 bg-gradient-to-r from-red-900 to-red-700 text-white rounded-lg shadow-lg font-medium tracking-wide"
      >
        Get in touch
      </a>
    </div>
  </div>
  <div class="w-full relative">
    {
      Array.from({ length: circleCount }).flatMap((_, circleIndex) => {
        const currentDotsCount = dotsPerCircle[circleIndex];
        const currentRadius = baseRadius + circleIndex * radiusIncrement;

        return (
          <motion.div
            className="rounded-full absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 origin-center"
            client:load
            key={`circle-${circleIndex}`}
            initial={{
              rotateZ: 0,
            }}
            animate={{
              rotateZ: 360 * (circleIndex % 2 == 0 ? 1 : -1),
            }}
            transition={{
              duration: 15 + (50 / (circleIndex + 1)) * circleIndex,
              repeat: Infinity,
              ease: "linear",
            }}
          >
            {Array.from({ length: currentDotsCount }).map((_, dotIndex) => {
              const angle = (dotIndex / currentDotsCount) * 2 * Math.PI;

              const dotSize = dotsBaseSize - circleIndex * 2;

              const x = Math.cos(angle) * currentRadius;
              const y = Math.sin(angle) * currentRadius;

              index++;

              return (
                <div
                  class="absolute rounded-full bg-gray-900/50 aspect-square"
                  style={{
                    width: `${dotSize}px`,
                    left: `${x}px`,
                    top: `${y}px`,
                    transform: `translate(-${dotSize / 2}px, -${dotSize / 2}px)`,
                  }}
                >
                  <motion.img
                    src="favicon.svg"
                    client:load
                    className="w-full h-full rounded-full"
                    key={`dot-${circleIndex}`}
                    initial={{
                      rotateZ: 0,
                    }}
                    animate={{
                      rotateZ: 360 * (circleIndex % 2 == 1 ? 1 : -1),
                    }}
                    transition={{
                      duration: 15 + (50 / (circleIndex + 1)) * circleIndex,
                      repeat: Infinity,
                      ease: "linear",
                    }}
                  />
                </div>
              );
            })}
          </motion.div>
        );
      })
    }
  </div>
</section>
